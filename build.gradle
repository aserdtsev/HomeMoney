import org.apache.tools.ant.filters.*
import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
    ext {
        javaVersion = '11'
        kotlinVersion = '1.5.31'
        springBootVersion = '2.5.6'
        flywayVersion = '7.5.0'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.noarg" version "$kotlinVersion"
    id 'org.springframework.boot' version "$springBootVersion"
    id "org.flywaydb.flyway" version "$flywayVersion"
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

idea {
    module {
        excludeDirs += files('work', 'log')
    }
}

noArg {
    annotation("com.autoxpl.clientapiservice.config.NoArgConstructor")
    annotation("com.fasterxml.jackson.annotation.JsonTypeInfo")
}

flyway {
    url = 'jdbc:postgresql://192.168.1.41:5432/homemoney'
    user = 'serdtsev'
    password = 'serdtsev'
    baselineVersion = 1.0
}

group = 'ru.serdtsev'
version = '1.1.0'
java.sourceCompatibility(JavaVersion.VERSION_11)
java.targetCompatibility(JavaVersion.VERSION_11)

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/kotlin'
}

springBoot { buildInfo() }

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-data-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2')
    implementation('io.github.microutils:kotlin-logging:1.8.0.1')

    implementation('net.sf.ehcache:ehcache:2.10.2')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.postgresql:postgresql')
    implementation('com.google.guava:guava:22.0')
    implementation('com.google.code.findbugs:jsr305:3.0.2')
    implementation('org.apache.commons:commons-lang3:3.5')
    implementation('org.projectlombok:lombok:1.18.12')
    // https://mvnrepository.com/artifact/org.flywaydb/flyway-core
    implementation("org.flywaydb:flyway-core:$flywayVersion")

    compileOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('com.nhaarman:mockito-kotlin:1.6.0')
    testImplementation('org.mockito:mockito-core:3.4.6')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = sourceCompatibility
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = javaVersion
    }
}

jar {
    archivesBaseName = rootProject.name
    manifest {
        attributes("Implementation-Title": "HomeMoney",
                "Implementation-Version": archiveVersion,
                "Implementation-Vendor": "Andrey Serdtsev")
    }
}


def image = 'homemoney'
def dockerDir = "$projectDir/docker"

task copyJar(type: Copy, dependsOn: bootJar) {
    group = 'docker'
    description = 'Copy a jar in docker building area'
    from("${buildDir}/libs") {
        bootJar.name
    }
    into("${dockerDir}/jars")
}

task createDockerFiles(type: Copy) {
    group = 'docker'
    description = 'Creates Docker files'
    delete fileTree("$dockerDir").matching {
        include('docker-compose.yml', 'Dockerfile')
    }
    from("$dockerDir/tpls") {
        include '*'
        filter(ReplaceTokens, tokens: [
                image: image,
                version: version
        ])
    }
    into("$dockerDir")
}

task createConfigs(type: Copy) {
    group = 'docker'
    description = 'Creates config files'
    from("$projectDir/config") {
        include '*'
    }
    into("$dockerDir/config")
}

task removeImage(type: DockerRemoveImage) {
    group = 'docker'
    description = 'Removes a docker image'
    force = true
    targetImageId("$image:$version")
    onError { e ->
        if (e.message != null && !e.message.contains('NotModifiedException') && !e.message.contains('No such image')) {
            throw new RuntimeException(e)
        }
    }
}

task buildImage(type: DockerBuildImage) {
    group = 'docker'
    description = 'Builds a docker image'
    dependsOn clean, build, copyJar, createDockerFiles, createConfigs, removeImage
    inputDir = file(dockerDir)
    images.add("$image:$version")
}
